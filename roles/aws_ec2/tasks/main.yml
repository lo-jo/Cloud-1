---
# Tasks handling all the provisioning, configuration, and setup of the EC2 instance
    - name: Check if the private key file exists locally
      stat:
        path: "{{ key_file_path }}"
      register: key_file_stat

    - name: Get AWS key pairs
      amazon.aws.ec2_key_info:
        names: "{{ key_name }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_creds.ec2_access_key }}"
        aws_secret_key: "{{ aws_creds.ec2_secret_key }}"
      register: ec2_keys_info

    - name: Create SSH key pair if it doesn't exist
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_creds.ec2_access_key }}"
        aws_secret_key: "{{ aws_creds.ec2_secret_key }}"
      no_log: false
      register: keypair_info
      when: 
        # - ec2_keys_info.key_pairs | length == 0  # The key pair does not exist in AWS
        - not key_file_stat.stat.exists  # The private key file does not exist locally

    - name: Save the private key locally
      copy:
        content: "{{ keypair_info.key.private_key }}"  # The private key from AWS
        dest: "{{ key_file_path }}"  # Path to save the private key
        mode: '0600'  # Ensure the key is saved with secure permissions
      when: 
        - keypair_info.key.private_key is defined  # Only save if the private key is available

    - name: Get public IP address
      ansible.builtin.shell: "curl http://ip.me"
      register: public_ip

    - name: Create security group # A security group acts as a virtual firewall that controls the traffic for one or more instances
      amazon.aws.ec2_security_group:
        name: "{{ sec_group }}"
        description: Security group for EC2 instance
        region: "{{ region }}"
        aws_access_key: "{{ aws_creds.ec2_access_key }}"
        aws_secret_key: "{{ aws_creds.ec2_secret_key }}"
        rules:
          - proto: tcp
            ports: 22
            cidr_ip: "{{ public_ip.stdout }}/32"  # Allow SSH access from our public IP only
          - proto: tcp
            ports: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports: 443
            cidr_ip: 0.0.0.0/0

    - name: Provision an EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ ec2_name }}"
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ sec_group }}"
        aws_access_key: "{{ aws_creds.ec2_access_key }}"
        aws_secret_key: "{{ aws_creds.ec2_secret_key }}"
        image_id: "{{ image }}"
        wait: yes
        region: "{{ region }}"
        count: "{{ no_of_instances }}"
      register: ec2_instance

    - name: Add the newly created instance to the in-memory inventory
      add_host:
        name: "{{ item.instance_id }}"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ key_name }}"
        group: webservers
      loop: "{{ ec2_instance.instances }}"
      when: ec2_instance.instances | length > 0

    - name: Write instance details to hosts.ini
      lineinfile:
        path: ../inventory/hosts.ini
        line: "server_{{ item.instance_id }} ansible_host={{ item.public_ip_address }} ansible_ssh_private_key_file={{ item.key_name }} ansible_user=ubuntu instance_id={{ item.instance_id }}"
        state: present
        regexp: '^ansible_id={{ item.instance_id }} '
      loop: "{{ ec2_instance.instances }}"
      when: ec2_instance.instances | length > 0

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ item.public_ip_address }}"
        port: 22
        state: started
        delay: 15 # Check every 15 seconds
        timeout: 150 #2.5 minutes max
      loop: "{{ ec2_instance.instances }}"
      when: ec2_instance.instances | length > 0

    - name: Add EC2 instance host key to known_hosts
      ansible.builtin.known_hosts:
        name: "{{ item.public_ip_address }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' ~ item.public_ip_address) }}"
      loop: "{{ ec2_instance.instances }}"
      when: ec2_instance.instances | length > 0
      register: known_hosts_result
      ignore_errors: yes
